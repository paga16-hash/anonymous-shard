"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[4356],{4536:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Report","collapsible":false,"collapsed":false,"customProps":{"description":"Project report"},"className":"red","items":[{"type":"link","label":"Introduction","href":"/anonymous-shard/docs/report/introduction","docId":"report/introduction","unlisted":false},{"type":"category","label":"Analysis","collapsible":true,"collapsed":true,"customProps":{"description":"Analysis breakdown"},"className":"red","items":[{"type":"link","label":"Business Requirements","href":"/anonymous-shard/docs/report/analysis/business-requirements","docId":"report/analysis/business-requirements","unlisted":false},{"type":"link","label":"Functional Requirements","href":"/anonymous-shard/docs/report/analysis/functional-requirements","docId":"report/analysis/functional-requirements","unlisted":false},{"type":"link","label":"Quality Attributes","href":"/anonymous-shard/docs/report/analysis/quality-attributes","docId":"report/analysis/quality-attributes","unlisted":false}],"href":"/anonymous-shard/docs/category/analysis"},{"type":"category","label":"Design","collapsible":true,"collapsed":true,"customProps":{"description":"A description of the design process"},"className":"red","items":[{"type":"category","label":"Architecture","collapsible":true,"collapsed":true,"customProps":{"description":"Architecture documentation"},"className":"red","items":[{"type":"link","label":"Documentation","href":"/anonymous-shard/docs/report/design/architecture/documentation","docId":"report/design/architecture/documentation","unlisted":false},{"type":"link","label":"Microservices patterns","href":"/anonymous-shard/docs/report/design/architecture/patterns","docId":"report/design/architecture/patterns","unlisted":false}],"href":"/anonymous-shard/docs/category/architecture"},{"type":"link","label":"Detailed Design","href":"/anonymous-shard/docs/report/design/detailed-design","docId":"report/design/detailed-design","unlisted":false}],"href":"/anonymous-shard/docs/category/design"},{"type":"category","label":"Implementation","collapsible":true,"collapsed":true,"customProps":{"description":"Non-trivial implementation details"},"className":"red","items":[{"type":"link","label":"Implementation","href":"/anonymous-shard/docs/report/implementation/","docId":"report/implementation/implementation","unlisted":false}],"href":"/anonymous-shard/docs/category/implementation"},{"type":"link","label":"DevOps","href":"/anonymous-shard/docs/report/devops","docId":"report/devops","unlisted":false},{"type":"link","label":"Testing and Evaluation","href":"/anonymous-shard/docs/report/testing","docId":"report/testing","unlisted":false},{"type":"category","label":"Deployment","collapsible":true,"collapsed":true,"customProps":{"description":"Deployment details"},"className":"red","items":[{"type":"link","label":"Deployment","href":"/anonymous-shard/docs/report/deployment/","docId":"report/deployment/deployment","unlisted":false}],"href":"/anonymous-shard/docs/category/deployment"},{"type":"link","label":"Conclusions","href":"/anonymous-shard/docs/report/conclusions","docId":"report/conclusions","unlisted":false}],"href":"/anonymous-shard/docs/category/report"}]},"docs":{"report/analysis/business-requirements":{"id":"report/analysis/business-requirements","title":"Business Requirements","description":"Glossary of Terms for the System","sidebar":"tutorialSidebar"},"report/analysis/functional-requirements":{"id":"report/analysis/functional-requirements","title":"Functional Requirements","description":"The functional requirements are the main part of the system that has to be implemented to satisfy the business requirements.","sidebar":"tutorialSidebar"},"report/analysis/quality-attributes":{"id":"report/analysis/quality-attributes","title":"Quality Attributes","description":"The quality attributes are the non-functional requirements that the system must satisfy to be considered a good system. In this case, the most important quality attributes are security, anonymity, and decentralization. Moreover, fault tolerance and scalability are also important to make the system reliable and usable in real scenarios.","sidebar":"tutorialSidebar"},"report/conclusions":{"id":"report/conclusions","title":"Conclusions","description":"Concluding this project has been a challenging and rewarding experience. Since it was a project that I started from scratch and with no clear boundaries, difficulties and challenges to face were numerous, but the satisfaction of having completed it\'s huge. At the beginning of the project, the difficulties were mainly non-technical, such as defining the scope of the project and the objectives to be achieved. When a good trade-off between basic abstraction and complexity was found, the idea of the project was clear.","sidebar":"tutorialSidebar"},"report/deployment/deployment":{"id":"report/deployment/deployment","title":"Deployment","description":"This section provides a brief overview of the deployment process and the necessary steps to deploy the system, but before that, the containerization process is explained.","sidebar":"tutorialSidebar"},"report/design/architecture/documentation":{"id":"report/design/architecture/documentation","title":"Documentation","description":"The system consists of nodes with various components that interact to deliver the described functionalities. The design follows Clean Architecture principles [Martin, 2017], promoting independence from frameworks and libraries. This methodology separates the system into layers, each responsible for specific tasks, ensuring modularity and flexibility.","sidebar":"tutorialSidebar"},"report/design/architecture/patterns":{"id":"report/design/architecture/patterns","title":"Microservices patterns","description":"Communication","sidebar":"tutorialSidebar"},"report/design/detailed-design":{"id":"report/design/detailed-design","title":"Detailed Design","description":"In this section, the detailed design of the system is presented.","sidebar":"tutorialSidebar"},"report/devops":{"id":"report/devops","title":"DevOps","description":"Build Automation","sidebar":"tutorialSidebar"},"report/implementation/implementation":{"id":"report/implementation/implementation","title":"Implementation","description":"From the detailed design section, the system exploits a lot of interfaces fixing the business logic and the separation of concerns also before the real implementation. One of the principles that have been followed is the Dependency Inversion Principle that is a key principle of the Clean Architecture.","sidebar":"tutorialSidebar"},"report/introduction":{"id":"report/introduction","title":"Introduction","description":"This section presents the developed prototype,","sidebar":"tutorialSidebar"},"report/testing":{"id":"report/testing","title":"Testing and Evaluation","description":"In this chapter, the tests conducted on the system and the metrics used to evaluate its performance are analyzed.","sidebar":"tutorialSidebar"}}}}')}}]);