
@startuml

interface TaskService {
  + getTasks(): Promise<Task[]>
  + getActiveTasks(): Promise<Task[]>
  + getPendingTasks(): Promise<Task[]>
  + getFailedTask(taskId: TaskId): Promise<Task>
}

interface TaskExecutor {
  + execute(task: Task): TaskResult
}

interface TaskEvaluator {
  + evaluate(task: Task): Promise<boolean>
  + getCandidates(task: Task, n: number): Promise<string[]>
}

TaskService --> TaskRepository : uses
TaskService --> TaskFactory : uses
TaskService -right-> TaskEvaluator : uses
TaskService --> TaskExecutor : uses
TaskRepository -up-> Encryptor : uses

interface Encryptor {
  + encrypt(publicKey: string, data: any): Promise<string>
}

interface TaskRepository {
  + upload(publicKey: string, taskResult: TaskResult): Promise<TaskResultIdentifier>
}
note top of TaskRepository : IPFS for storage

TaskRepository o-- Task

interface TaskFactory {
      + createTask(): Task
      + taskFrom(taskId: TaskId, otherTaskDetails: string): Task
}
TaskFactory -left-> Task : creates

interface Task {

}
note bottom of Task : Entity
Task o-left- TaskStatus

interface TaskStatus {
    + getStatus(): string
}
note left of TaskStatus : Value Object

enum StatusType {
  COMPLETED
  PENDING
  FAILED
}

StatusType -up- TaskStatus : has

interface TaskId {
    + getValue(): string
}

TaskId -down-> Task : identifies

@enduml
